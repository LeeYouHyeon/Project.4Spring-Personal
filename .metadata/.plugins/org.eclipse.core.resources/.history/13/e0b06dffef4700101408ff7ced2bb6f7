package com.koreait.www.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

import com.koreait.www.security.CustomAuthUserService;
import com.koreait.www.security.LoginFailureHandler;
import com.koreait.www.security.LoginSuccessHandler;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
	
	// 비밀번호 암호화 객체 생성 : PasswordEncoder
	@Bean
	public PasswordEncoder bcPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	// SuccessHandler 객체 bean 생성 => 사용자 커스텀 객체
	@Bean
	public AuthenticationSuccessHandler authSuccessHandler() {
		return new LoginSuccessHandler();
	}
	// FailureHandler 객체 bean 생성 => 사용자 커스텀 객체
	@Bean
	public AuthenticationFailureHandler authFailureHandler() {
		return new LoginFailureHandler();
	}
	
	// UserDetail 객체 bean 생성 => 사용자 커스텀 객체(기본은 ID, pwd)
	@Bean
	public UserDetailsService customDetailsService() {
		return new CustomAuthUserService();
	}
	
	@Bean
	public DaoAuthenticationProvider authenticationProvider(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {
	    DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
	    provider.setUserDetailsService(userDetailsService);
	    provider.setPasswordEncoder(passwordEncoder);
	    
	    provider.setHideUserNotFoundExceptions(false);
	    
	    return provider;
	}
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		// 인증용 객체 생성 매니저 설정
		auth.userDetailsService(customDetailsService())
			.passwordEncoder(bcPasswordEncoder());
		
		// 위 코드의 Provider는 setHideUserNotFoundExceptions(true)가 default
		// 즉, UsernameNotFoundException 이 자동으로 BadcredentialsException 으로 포장
		// 외부로 전달되지 않기 때문에 따로 DaoAuthenticationProvider 에서 setHideUserNotFoundException 을 false 로 변경.
		
		// UsernameNotFoundException 에러메세지 숨기기 비활성화
		auth.authenticationProvider(authenticationProvider(customDetailsService(), bcPasswordEncoder()));
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		// 권한에 따른 주소 매핑
		// 로그인 로그아웃 구성정보 설정
		
		// csrf() : csrf 공격에 대한 설정
		// Spring security에서 기본적으로 활성화 되어있는 기능
		// 클라이언트 -> 서버 요청을 보낼 때 CSRF 토큰을 함께 전송
		// GET mapping은 토큰을 요구하지 않음(서버에서 데이터를 일방적으로 보내는 mapping)
		// post, put, delete는 토큰 요구함
//		http.csrf().disable(); // 작업 후 삭제
//		CharacterEncodingFilter filter = new CharacterEncodingFilter();
//		filter.setEncoding("UTF-8");
//		filter.setForceEncoding(true);
//		http.addFilterBefore(filter, CsrfFilter.class);
		http.csrf().disable();
		
		// 권한에 따른 승인 요청
		// antMatchers : 접근을 허용하는 경로
		// permitAll : 누구나 접근가능한 경로
		// hasRole('권한') : 해당 권한 확인. ROLE_ 포함. ADMIN => ROLE_ADMIN으로 적용
		// authenticated() : 인증된 사용자만 가능한 경로
		// ADMIN > MANAGER > USER
		http.authorizeRequests()
			.antMatchers("/user/list").hasRole("ADMIN")
			.antMatchers("/", "/user/login", "/user/register",
					"/user/check", "/user/registerResult").permitAll()
			.anyRequest().authenticated();
		
		// 로그인 페이지 구성 : username => email / password => pwd
		http.formLogin()
			.usernameParameter("id")
			.passwordParameter("pw")
			.loginPage("/user/login") // controller에 주소 요청 매핑 값 필수
//			.defaultSuccessUrl("/") successHandler 없는 경우
//			.failureUrl("/"); failureHandler 없는 경우
			.successHandler(authSuccessHandler())
			.failureHandler(authFailureHandler());
		
		// 로그아웃 구성 : method = "post"
		http.logout()
			.logoutUrl("/user/logout")
			.invalidateHttpSession(true)
			.deleteCookies("JSESSIONID")
			.logoutSuccessUrl("/");
	}
	
}
